openapi: 3.0.0
info:
  title: Infinity API
  description: Explains how to interact with API
  version: 1.0.0
servers:
  - url: "secret"
paths:
  /users:
    get:
      summary: Get a list of users or a single user
      description: To get a list of users, simply send a GET request to API_URL/users. To get a single user, must pass in primary key name, primary key, sort key name, and sort key as query parameters.
      parameters:
        - name: primaryKeyName
          in: query
          description: The name of the primary key.
          required: false
          schema:
            type: string
        - name: primaryKey
          in: query
          description: The value of the primary key.
          required: false
          schema:
            type: string
        - name: sortKeyName
          in: query
          description: The name of the sort key.
          required: false
          schema:
            type: string
        - name: sortKey
          in: query
          description: The value of the sort key.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: A list of users or a sinle user.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    userID:
                      type: string
                    email:
                      type: string
        "405":
          description: The requested method for users was not found on this server.

    post:
      summary: Create a new user or Update an existing user
      description: Must pass in userId and email in request body at minimum. Can pass in other key value pairs but they must follow the same formatting as userId and email. This is how dynamodb formats things.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userID:
                  type: object
                  properties:
                    S:
                      type: string
                email:
                  type: object
                  properties:
                    S:
                      type: string

      responses:
        "201":
          description: User created successfully
        "400":
          description: Missing userId or email in request body
        "500":
          description: Internal Server Error
  /login:
    post:
      summary: Check if user is authorized and return a JWT
      description: Checks whether a user exists in the database. If the user exists, returns a JWT; otherwise, returns 'User unauthorized' message.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestBodySchema"
      responses:
        "200":
          description: Successful authentication. Returns a JWT token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authenticated user.
        "400":
          description: Invalid request. Missing required fields or invalid JSON.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating the reason for the invalid request.
        "401":
          description: Unauthorized. Invalid credentials provided.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating that the user is unauthorized.
        "500":
          description: Internal server error. An unexpected error occurred.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating the internal server error.

components:
  schemas:
    RequestBodySchema:
      type: object
      properties:
        email:
          type: string
          description: The email of the user.
        password:
          type: string
          description: The password of the user.
        userId:
          type: string
          description: The unique userId of the user.
